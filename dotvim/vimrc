call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" look for tags up the file path
set tags=tags;/

" set clipboard=unnamed

set autoindent
set laststatus=2
set backspace=2
set cursorline
set expandtab
set foldlevel=10
set foldmethod=indent
set hlsearch
set ignorecase
set incsearch
set mouse=c
set nobackup
set nocompatible
set noerrorbells
set nohidden
set nowritebackup
set number
set ruler
set scrolloff=5
set shiftwidth=4
set showcmd
set showmatch
set smartcase
set smarttab
set softtabstop=4
set t_Co=256
set tabstop=4
set viminfo='20,\"50
set visualbell
set colorcolumn=80
"set listchars=tab:▸\ ,eol:¬
"set list

colorscheme solarized
syntax on
filetype on
filetype plugin on

if !has("gui")
    set background=dark
endif

autocmd FileType python call SetPython()
function! SetPython()
    setlocal keywordprg=python\ -m\ pydoc
    setlocal makeprg=pyflakes\ %
    setlocal errorformat=%+G\ \ File\ \"%f\"\\,\ line\ %l\\,\ in\ %m
    nmap <C-c><C-c> :!flake8 %
    nmap <C-c><C-t> :!nosetests %
    autocmd BufWritePre *.py %s/\s\+$//e
    highlight OverLength ctermbg=darkred ctermfg=white guibg=#592929
    match OverLength /\%81v.\+/
    abbreviate prd print "\033[91m*** [DEBUG] \033[0m
    abbreviate pdb import pdb; pdb.set_trace()
    abbreviate absimp from __future__ import absolute_import, print_function
    abbreviate main() import argparse<CR>import logging<CR><CR><CR>def main():<CR>parser = argparse.ArgumentParser()<CR>parser.add_argument('--debug', default='INFO', required=False, type=str)<CR><C-u>    args = parser.parse_args()<CR>logging.basicConfig(format='[%(asctime)s][%(levelname)s][%(filename)s'<CR>            ':%(lineno)d] %(message)s',<CR>level=getattr(logging, args.debug))<CR><CR><C-u>if __name__ == '__main__':<CR>main()
endfunction

autocmd FileType javascript call SetJavaScript()
autocmd FileType html call SetJavaScript()
function! SetJavaScript()
    set shiftwidth=2
    set softtabstop=2
    set tabstop=2
    set nowrap
endfunction

nmap <C-c><C-d> :r !date "+\%Y\%m\%d"<CR>

" highlight trailing space
highlight TrailingSpace ctermbg=darkred ctermfg=white guibg=#592929
match TrailingSpace /\s\+$/

inoremap jk <Esc>
noremap j gj
noremap k gk
" complete closing tab
iabbrev </ </<C-X><C-O>

let mapleader = ","

" window navigation
nmap <silent> <leader>k <C-W>k
nmap <silent> <leader>j <C-W>j
nmap <silent> <leader>h <C-W>h
nmap <silent> <leader>l <C-W>l
nmap =j :%!python -m json.tool<CR>

" select paste text
noremap <leader>v V`]

" open tab
nmap <silent> <leader>gd :tabnew %:h/<CR>           " open current directory in new tab
nmap <silent> <leader>gf :tabnew <cfile><CR>        " open file under cursor in new tab

" tab navigation
"nmap <silent> th :tabprevious<CR>
"nmap <silent> tl :tabnext<CR>
nmap <silent> <leader>th :tabprevious<CR>
nmap <silent> <leader>tl :tabnext<CR>

" tab movement
nmap <silent> <leader><C-H> :-tabmove<CR>
nmap <silent> <leader><C-L> :+tabmove<CR>


" some goodies from https://github.com/nelstrom/dotfiles/blob/master/vimrc
"nmap <silent> <leader>l :set list!<CR>
"nmap <silent> <leader>w :set wrap!<CR>
"nmap <silent> <leader>s :set spell!<CR>
"nmap <silent> <leader>n :silent :nohlsearch<CR>

" window switching

" tab switching
"map <D-S-]> gt
"map <D-S-[> gT
"map <D-1> 1gt
"map <D-2> 2gt
"map <D-3> 3gt
"map <D-4> 4gt
"map <D-5> 5gt
"map <D-6> 6gt
"map <D-7> 7gt
"map <D-8> 8gt
"map <D-9> 9gt
"map <D-0> :tablast<CR>

" ctrlp
nmap <silent> <leader>p :CtrlP<CR>


" auto-resize splits on window resize
autocmd VimResized * exe "normal! \<c-w>="
" delete hidden buffers
autocmd BufReadPost fugitive://* set bufhidden=delete
" show git branch in status line
if has('statusline')
  set laststatus=2                                          " statusline setup
  set statusline=   " clear the statusline, allow for rearranging parts
  set statusline+=%f\                "Path to the file, as typed or relative to current dir
  set statusline+=[#%n]               "buffer number
  "set statusline+=%#errormsg#        "change color
  "set statusline+=%{&ff!='unix'?'['.&ff.']':''}   "display a warning if fileformat isnt unix
  "set statusline+=%*                "reset color to normal statusline color
  "set statusline+=%#errormsg#       "change color
  "set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}   "display a warning if file encoding isnt utf-8
  "set statusline+=%*                "reset color to normal statusline color
  set statusline+=\ %y              "filetype
  set statusline+=%([%R%M]%)        "read-only (RO), modified (+) and unmodifiable (-) flags between braces
  set statusline+=%{'~'[&pm=='']}   "shows a '~' if in patchmode
  set statusline+=\ %{fugitive#statusline()}  "show Git info, via fugitive.git
  "set statusline+=\ (%{synIDattr(synID(line('.'),col('.'),0),'name')}) "DEBUG : display the current syntax item name
  "set statusline+=%#error#          "change color
  "set statusline+=%{&paste?'[paste]':''}    "display a warning if &paste is set
  "set statusline+=%*                "reset color to normal statusline color
  set statusline+=%=                "right-align following items
  "set statusline+=\ %l,%L,          "current line number/total number of lines,
  set statusline+=\ %l,%c                "Column number
  set statusline+=%V                " -{Virtual column number} (Not displayed if equal to 'c')
  set statusline+=\ %p%%            "percentage of lines through the file%
  set statusline+=\                 "trailing space
  if has('title')
    set titlestring=%t%(\ [%R%M]%)
  endif
endif

" remap :
noremap ; :

" Double escape when tmuxing
function! TmuxEscape(s)
  if !exists('$TMUX')
    return a:s
  endif
  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"
  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

" Autotoggle paste
let &t_SI .= TmuxEscape("\<Esc>[?2004h")
let &t_EI .= TmuxEscape("\<Esc>[?2004l")

function! TermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ TermPasteBegin()

if has("autocmd")
  filetype plugin indent on
endif

if !has("python") && !has("python3")
    let g:leaderf_loaded = 1
endif
