call plug#begin('~/.vim/plugged')

" substitute, search, and abbreviate multiple variants of a word
Plug 'tpope/vim-abolish'
" fuzzy file finder
Plug 'ctrlpvim/ctrlp.vim'
" solarized colorscheme
Plug 'altercation/vim-colors-solarized'
" git wrapper
Plug 'tpope/vim-fugitive'
" tab aligned text
Plug 'godlygeek/tabular'
" golang dev
Plug 'fatih/vim-go'
if !exists('$TMUX')
    nmap <silent> <leader>a= :Tabularize /=<CR>
    vmap <silent> <leader>a= :Tabularize /=<CR>
    nmap <silent> <leader>a: :Tabularize /:\zs<CR>
    vmap <silent> <leader>a: :Tabularize /:\zs<CR>
endif

" fancy statusline
Plug 'vim-airline/vim-airline'

" fancy startup screen
Plug 'mhinz/vim-startify'

" markdown
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'masukomi/vim-markdown-folding', { 'for': 'markdown' }

" yank stack
Plug 'vim-scripts/YankRing.vim'

" context-aware pasting
Plug 'sickill/vim-pasta'

" nerdtree
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

" syntax and indentation for many languages
Plug 'sheerun/vim-polyglot'

"  snippets engine
Plug 'SirVer/ultisnips'
" snippets
Plug 'honza/vim-snippets'
" trigger configuration
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" code completion
"Plug 'neoclide/coc.nvim', {'branch': 'release'}

" code completion extensions
let g:coc_global_extensions = [
\ 'coc-css',
\ 'coc-json',
\ 'coc-tsserver',
\ 'coc-git',
\ 'coc-eslint',
\ 'coc-tslint-plugin',
\ 'coc-pairs',
\ 'coc-sh',
\ 'coc-vimlsp',
\ 'coc-emmet',
\ 'coc-prettier',
\ 'coc-snippets',
\ 'coc-explorer',
\ 'coc-diagnostic',
\ 'coc-jedi',
\ 'coc-python',
\ 'coc-omnisharp',
\ 'coc-rls',
\ 'coc-sh',
\ 'coc-spell-checker',
\ 'coc-flow',
\ 'coc-go'
\ ]

call plug#end()

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" look for tags up the file path
set tags=tags;/

if system('uname -s') == "Darwin\n"
  set clipboard=unnamed "OSX
else
  set clipboard=unnamedplus "Linux
endif

" Give more space for displaying messages.
" set cmdheight=2

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

set autoindent
set laststatus=2
set backspace=2
set cursorline
set expandtab
set foldlevel=10
set foldmethod=indent
set hlsearch
set ignorecase
set incsearch
set mouse=c
set nobackup
set nocompatible
set noerrorbells
set nohidden
set nowritebackup
set number
set ruler
set scrolloff=5
set shiftwidth=4
set showcmd
set showmatch
set smartcase
set smarttab
set softtabstop=4
set t_Co=256
set tabstop=4
set viminfo='20,\"50
set visualbell
set colorcolumn=80
"set listchars=tab:▸\ ,eol:¬
"set list

colorscheme solarized
syntax on
filetype on
filetype plugin on

if !has("gui")
    set background=dark
endif

autocmd FileType python call SetPython()
function! SetPython()
    setlocal keywordprg=python\ -m\ pydoc
    setlocal makeprg=pyflakes\ %
    setlocal errorformat=%+G\ \ File\ \"%f\"\\,\ line\ %l\\,\ in\ %m
    nmap <C-c><C-c> :!flake8 %
    nmap <C-c><C-t> :!nosetests %
    autocmd BufWritePre *.py %s/\s\+$//e
    highlight OverLength ctermbg=darkred ctermfg=white guibg=#592929
    match OverLength /\%81v.\+/
    abbreviate prd print "\033[91m*** [DEBUG] \033[0m
    abbreviate pdb import pdb; pdb.set_trace()
    abbreviate absimp from __future__ import absolute_import, print_function
    abbreviate main() import argparse<CR>import logging<CR><CR><CR>def main():<CR>parser = argparse.ArgumentParser()<CR>parser.add_argument('--debug', default='INFO', required=False, type=str)<CR><C-u>    args = parser.parse_args()<CR>logging.basicConfig(format='[%(asctime)s][%(levelname)s][%(filename)s'<CR>            ':%(lineno)d] %(message)s',<CR>level=getattr(logging, args.debug))<CR><CR><C-u>if __name__ == '__main__':<CR>main()
endfunction

autocmd FileType javascript call SetJavaScript()
autocmd FileType html call SetJavaScript()
function! SetJavaScript()
    set shiftwidth=2
    set softtabstop=2
    set tabstop=2
    set nowrap
endfunction

nmap <C-c><C-d> :r !date "+\%Y\%m\%d"<CR>

" highlight trailing space
highlight TrailingSpace ctermbg=darkred ctermfg=white guibg=#592929
match TrailingSpace /\s\+$/

inoremap jk <Esc>
noremap j gj
noremap k gk
" complete closing tab
iabbrev </ </<C-X><C-O>

let mapleader = ","

" window navigation
nmap <silent> <leader>k <C-W>k
nmap <silent> <leader>j <C-W>j
nmap <silent> <leader>h <C-W>h
nmap <silent> <leader>l <C-W>l
nmap =j :%!python -m json.tool<CR>

" select paste text
noremap <leader>v V`]

" open tab
" nmap <silent> <leader>gd :tabnew %:h/<CR>           " open current directory in new tab
" nmap <silent> <leader>gf :tabnew <cfile><CR>        " open file under cursor in new tab

" tab navigation
"nmap <silent> th :tabprevious<CR>
"nmap <silent> tl :tabnext<CR>
nmap <silent> <leader>th :tabprevious<CR>
nmap <silent> <leader>tl :tabnext<CR>

" tab movement
nmap <silent> <leader><C-H> :-tabmove<CR>
nmap <silent> <leader><C-L> :+tabmove<CR>


" some goodies from https://github.com/nelstrom/dotfiles/blob/master/vimrc
"nmap <silent> <leader>l :set list!<CR>
nmap <silent> <leader>w :set wrap!<CR>
nmap <silent> <leader>s :set spell!<CR>
nmap <silent> <leader>n :silent :nohlsearch<CR>

" window switching

" tab switching
"map <D-S-]> gt
"map <D-S-[> gT
"map <D-1> 1gt
"map <D-2> 2gt
"map <D-3> 3gt
"map <D-4> 4gt
"map <D-5> 5gt
"map <D-6> 6gt
"map <D-7> 7gt
"map <D-8> 8gt
"map <D-9> 9gt
"map <D-0> :tablast<CR>

" ctrlp
nmap <silent> <leader>p :CtrlP<CR>


" auto-resize splits on window resize
autocmd VimResized * exe "normal! \<c-w>="
" delete hidden buffers
autocmd BufReadPost fugitive://* set bufhidden=delete
" show git branch in status line
"" if has('statusline')
""   set laststatus=2                                          " statusline setup
""   set statusline=   " clear the statusline, allow for rearranging parts
""   set statusline+=%f\                "Path to the file, as typed or relative to current dir
""   set statusline+=[#%n]               "buffer number
""   "set statusline+=%#errormsg#        "change color
""   "set statusline+=%{&ff!='unix'?'['.&ff.']':''}   "display a warning if fileformat isnt unix
""   "set statusline+=%*                "reset color to normal statusline color
""   "set statusline+=%#errormsg#       "change color
""   "set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}   "display a warning if file encoding isnt utf-8
""   "set statusline+=%*                "reset color to normal statusline color
""   set statusline+=\ %y              "filetype
""   set statusline+=%([%R%M]%)        "read-only (RO), modified (+) and unmodifiable (-) flags between braces
""   set statusline+=%{'~'[&pm=='']}   "shows a '~' if in patchmode
""   set statusline+=\ %{fugitive#statusline()}  "show Git info, via fugitive.git
""   "set statusline+=\ (%{synIDattr(synID(line('.'),col('.'),0),'name')}) "DEBUG : display the current syntax item name
""   "set statusline+=%#error#          "change color
""   "set statusline+=%{&paste?'[paste]':''}    "display a warning if &paste is set
""   "set statusline+=%*                "reset color to normal statusline color
""   set statusline+=%=                "right-align following items
""   "set statusline+=\ %l,%L,          "current line number/total number of lines,
""   set statusline+=\ %l,%c                "Column number
""   set statusline+=%V                " -{Virtual column number} (Not displayed if equal to 'c')
""   set statusline+=\ %p%%            "percentage of lines through the file%
""   set statusline^=%{coc#status()}
""   set statusline+=\                 "trailing space
""   if has('title')
""     set titlestring=%t%(\ [%R%M]%)
""   endif
"" endif

" remap :
noremap ; :

" Double escape when tmuxing
function! TmuxEscape(s)
  if !exists('$TMUX')
    return a:s
  endif
  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"
  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

" Autotoggle paste
let &t_SI .= TmuxEscape("\<Esc>[?2004h")
let &t_EI .= TmuxEscape("\<Esc>[?2004l")

function! TermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ TermPasteBegin()

function! TwiddleCase(str)
  if a:str ==# toupper(a:str)
    let result = tolower(a:str)
  elseif a:str ==# tolower(a:str)
    let result = substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
  else
    let result = toupper(a:str)
  endif
  return result
endfunction
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv

if has("autocmd")
  filetype plugin indent on
endif

let g:python_host_prog = '~/opt/neovim/bin/python'
let g:python3_host_prog = '~/opt/neovim_python3/bin/python3'
"call coc#config('python', {'pythonPath': '~/opt/neovim_python3/bin/python3'})


if !has("python") && !has("python3")
    let g:leaderf_loaded = 1
endif
